// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/app.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EthAuthorizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EthAuthorizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EthAuthorizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EthAuthorizeRequestMultiError, or nil if none found.
func (m *EthAuthorizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EthAuthorizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EthAuthorizeRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EthAuthorizeRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EthAuthorizeRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EthAuthorizeRequestMultiError(errors)
	}

	return nil
}

// EthAuthorizeRequestMultiError is an error wrapping multiple validation
// errors returned by EthAuthorizeRequest.ValidateAll() if the designated
// constraints aren't met.
type EthAuthorizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthAuthorizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthAuthorizeRequestMultiError) AllErrors() []error { return m }

// EthAuthorizeRequestValidationError is the validation error returned by
// EthAuthorizeRequest.Validate if the designated constraints aren't met.
type EthAuthorizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthAuthorizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthAuthorizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthAuthorizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthAuthorizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthAuthorizeRequestValidationError) ErrorName() string {
	return "EthAuthorizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EthAuthorizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthAuthorizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthAuthorizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthAuthorizeRequestValidationError{}

// Validate checks the field values on EthAuthorizeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EthAuthorizeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EthAuthorizeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EthAuthorizeReplyMultiError, or nil if none found.
func (m *EthAuthorizeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EthAuthorizeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return EthAuthorizeReplyMultiError(errors)
	}

	return nil
}

// EthAuthorizeReplyMultiError is an error wrapping multiple validation errors
// returned by EthAuthorizeReply.ValidateAll() if the designated constraints
// aren't met.
type EthAuthorizeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthAuthorizeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthAuthorizeReplyMultiError) AllErrors() []error { return m }

// EthAuthorizeReplyValidationError is the validation error returned by
// EthAuthorizeReply.Validate if the designated constraints aren't met.
type EthAuthorizeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthAuthorizeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthAuthorizeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthAuthorizeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthAuthorizeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthAuthorizeReplyValidationError) ErrorName() string {
	return "EthAuthorizeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EthAuthorizeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthAuthorizeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthAuthorizeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthAuthorizeReplyValidationError{}

// Validate checks the field values on DepositRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DepositRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DepositRequestMultiError,
// or nil if none found.
func (m *DepositRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DepositRequestMultiError(errors)
	}

	return nil
}

// DepositRequestMultiError is an error wrapping multiple validation errors
// returned by DepositRequest.ValidateAll() if the designated constraints
// aren't met.
type DepositRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositRequestMultiError) AllErrors() []error { return m }

// DepositRequestValidationError is the validation error returned by
// DepositRequest.Validate if the designated constraints aren't met.
type DepositRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositRequestValidationError) ErrorName() string { return "DepositRequestValidationError" }

// Error satisfies the builtin error interface
func (e DepositRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositRequestValidationError{}

// Validate checks the field values on DepositReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DepositReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DepositReplyMultiError, or
// nil if none found.
func (m *DepositReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DepositReplyMultiError(errors)
	}

	return nil
}

// DepositReplyMultiError is an error wrapping multiple validation errors
// returned by DepositReply.ValidateAll() if the designated constraints aren't met.
type DepositReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositReplyMultiError) AllErrors() []error { return m }

// DepositReplyValidationError is the validation error returned by
// DepositReply.Validate if the designated constraints aren't met.
type DepositReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositReplyValidationError) ErrorName() string { return "DepositReplyValidationError" }

// Error satisfies the builtin error interface
func (e DepositReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositReplyValidationError{}

// Validate checks the field values on EthAuthorizeRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EthAuthorizeRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EthAuthorizeRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EthAuthorizeRequest_SendBodyMultiError, or nil if none found.
func (m *EthAuthorizeRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *EthAuthorizeRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Code

	// no validation rules for Sign

	if len(errors) > 0 {
		return EthAuthorizeRequest_SendBodyMultiError(errors)
	}

	return nil
}

// EthAuthorizeRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by EthAuthorizeRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type EthAuthorizeRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthAuthorizeRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthAuthorizeRequest_SendBodyMultiError) AllErrors() []error { return m }

// EthAuthorizeRequest_SendBodyValidationError is the validation error returned
// by EthAuthorizeRequest_SendBody.Validate if the designated constraints
// aren't met.
type EthAuthorizeRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthAuthorizeRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthAuthorizeRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthAuthorizeRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthAuthorizeRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthAuthorizeRequest_SendBodyValidationError) ErrorName() string {
	return "EthAuthorizeRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e EthAuthorizeRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthAuthorizeRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthAuthorizeRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthAuthorizeRequest_SendBodyValidationError{}
